[{"fullname": "wvpy", "modulename": "wvpy", "qualname": "", "type": "module", "doc": "<p>This<a href=\"https://github.com/WinVector/wvpy\">https://github.com/WinVector/wvpy</a> is a package of example files for teaching data science.</p>\n"}, {"fullname": "wvpy.util", "modulename": "wvpy.util", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "wvpy.util.cross_predict_model", "modulename": "wvpy.util", "qualname": "cross_predict_model", "type": "function", "doc": "<p>train a model Y~X using the cross validation plan and return predictions</p>\n\n<p>:param fitter: sklearn model we can call .fit() on\n:param X: explanatory variables (matrix or data frame)\n:param Y: dependent variable (vector or series)\n:param plan: cross validation plan from mk_cross_plan()\n:return: vector of simulated out of sample predictions</p>\n", "parameters": ["fitter", "X", "Y", "plan"], "funcdef": "def"}, {"fullname": "wvpy.util.cross_predict_model_prob", "modulename": "wvpy.util", "qualname": "cross_predict_model_prob", "type": "function", "doc": "<p>train a model Y~X using the cross validation plan and return probability matrix</p>\n\n<p>:param fitter: sklearn model we can call .fit() on\n:param X: explanatory variables (matrix or data frame)\n:param Y: dependent variable (vector or series)\n:param plan: cross validation plan from mk_cross_plan()\n:return: matrix of simulated out of sample predictions</p>\n", "parameters": ["fitter", "X", "Y", "plan"], "funcdef": "def"}, {"fullname": "wvpy.util.mean_deviance", "modulename": "wvpy.util", "qualname": "mean_deviance", "type": "function", "doc": "<p>compute per-row deviance of predictions versus istrue</p>\n\n<p>:param predictions: vector of probability preditions\n:param istrue: vector of True/False outcomes to be predicted\n:param eps: how close to zero or one we clip predictions\n:return: vector of per-row deviances</p>\n", "parameters": ["predictions", "istrue", "eps"], "funcdef": "def"}, {"fullname": "wvpy.util.mean_null_deviance", "modulename": "wvpy.util", "qualname": "mean_null_deviance", "type": "function", "doc": "<p>compute per-row nulll deviance of predictions versus istrue</p>\n\n<p>:param istrue: vector of True/False outcomes to be predicted\n:param eps: how close to zero or one we clip predictions\n:return: mean null deviance of using prevalence as the prediction.</p>\n", "parameters": ["istrue", "eps"], "funcdef": "def"}, {"fullname": "wvpy.util.mk_cross_plan", "modulename": "wvpy.util", "qualname": "mk_cross_plan", "type": "function", "doc": "<p>Randomly split range(n) into k train/test groups such that test groups partition range(n).</p>\n\n<p>:param n: integer &gt; 1\n:param k: integer &gt; 1\n:return: list of train/test dictionaries</p>\n\n<p>Example:</p>\n\n<p>import wvpy.util</p>\n\n<p>wvpy.util.mk_cross_plan(10, 3)</p>\n", "parameters": ["n", "k"], "funcdef": "def"}, {"fullname": "wvpy.util.matching_roc_area_curve", "modulename": "wvpy.util", "qualname": "matching_roc_area_curve", "type": "function", "doc": "<p>Find an ROC curve with a given area.</p>\n\n<p>:param auc: area to match\n:return: tuple of ideal x, y series matching area</p>\n", "parameters": ["auc"], "funcdef": "def"}, {"fullname": "wvpy.util.plot_roc", "modulename": "wvpy.util", "qualname": "plot_roc", "type": "function", "doc": "<p>Plot a ROC curve of numeric prediction against boolean istrue.</p>\n\n<p>:param prediction: column of numeric predictions\n:param istrue: column of items to predict\n:param title: plot title\n:param truth_target: value to consider target or true.\n:param ideal_line_color: if not None, color of ideal line\n:param extra_points: data frame of additional point to annotate graph, columns fpr, tpr, label\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: calculated area under the curve, plot produced by call.</p>\n\n<p>Example:</p>\n\n<p>import pandas\nimport wvpy.util</p>\n\n<p>d = pandas.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [False, False, True, True, False]\n})</p>\n\n<p>wvpy.util.plot_roc(\n    prediction=d['x'],\n    istrue=d['y'],\n    ideal_line_color='lightgrey'\n)</p>\n\n<p>wvpy.util.plot_roc(\n    prediction=d['x'],\n    istrue=d['y'],\n    extra_points=pandas.DataFrame({\n        'tpr': [0, 1],\n        'fpr': [0, 1],\n        'label': ['AAA', 'BBB']\n    })\n)</p>\n", "parameters": ["prediction", "istrue", "title", "truth_target", "ideal_line_color", "extra_points", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.dual_density_plot", "modulename": "wvpy.util", "qualname": "dual_density_plot", "type": "function", "doc": "<p>Plot a dual density plot of numeric prediction probs against boolean istrue.</p>\n\n<p>:param probs: vector of numeric predictions.\n:param istrue: truth vector\n:param title: title of plot\n:param truth_target: value considerd true\n:param positive_label=label for positive class\n:param negative_label=label for negative class\n:param ylabel=y axis label\n:param xlabel=x axis label\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n\n<p>Example:</p>\n\n<p>import pandas\nimport wvpy.util</p>\n\n<p>d = pandas.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [False, False, True, True, False]\n})</p>\n\n<p>wvpy.util.dual_density_plot(\n    probs=d['x'],\n    istrue=d['y'],\n)</p>\n", "parameters": ["probs", "istrue", "title", "truth_target", "positive_label", "negative_label", "ylabel", "xlabel", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.dual_hist_plot", "modulename": "wvpy.util", "qualname": "dual_hist_plot", "type": "function", "doc": "<p>plot a dual histogram plot of numeric prediction probs against boolean istrue</p>\n\n<p>:param probs: vector of numeric predictions.\n:param istrue: truth vector\n:param title: title of plot\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n", "parameters": ["probs", "istrue", "title", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.dual_density_plot_proba1", "modulename": "wvpy.util", "qualname": "dual_density_plot_proba1", "type": "function", "doc": "<p>Plot a dual density plot of numeric prediction probs[:,1] against boolean istrue.</p>\n\n<p>:param probs: vector of numeric predictions\n:param istrue: truth target\n:param title: title of plot\n:param truth_target: value considered true\n:param positive_label=label for positive class\n:param negative_label=label for negative class\n:param ylabel=y axis label\n:param xlabel=x axis label\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n", "parameters": ["probs", "istrue", "title", "truth_target", "positive_label", "negative_label", "ylabel", "xlabel", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.dual_hist_plot_proba1", "modulename": "wvpy.util", "qualname": "dual_hist_plot_proba1", "type": "function", "doc": "<p>plot a dual histogram plot of numeric prediction probs[:,1] against boolean istrue</p>\n\n<p>:param probs: vector of probability predictions\n:param istrue: vector of ground truth to condition on\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n", "parameters": ["probs", "istrue", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.gain_curve_plot", "modulename": "wvpy.util", "qualname": "gain_curve_plot", "type": "function", "doc": "<p>plot cumulative outcome as a function of prediction order (descending)</p>\n\n<p>:param prediction: vector of numeric predictions\n:param outcome: vector of actual values\n:param title: plot title\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n", "parameters": ["prediction", "outcome", "title", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.lift_curve_plot", "modulename": "wvpy.util", "qualname": "lift_curve_plot", "type": "function", "doc": "<p>plot lift as a function of prediction order (descending)</p>\n\n<p>:param prediction: vector of numeric predictions\n:param outcome: vector of actual values\n:param title: plot title\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None</p>\n", "parameters": ["prediction", "outcome", "title", "show"], "funcdef": "def"}, {"fullname": "wvpy.util.search_grid", "modulename": "wvpy.util", "qualname": "search_grid", "type": "function", "doc": "<p>build a cross product of all named dictionary entries</p>\n\n<p>:param inp:\n:return:</p>\n", "parameters": ["inp"], "funcdef": "def"}, {"fullname": "wvpy.util.grid_to_df", "modulename": "wvpy.util", "qualname": "grid_to_df", "type": "function", "doc": "<p>convert a search_grid list of maps to a pandas data frame</p>\n\n<p>:param grid:\n:return:</p>\n", "parameters": ["grid"], "funcdef": "def"}, {"fullname": "wvpy.util.eval_fn_per_row", "modulename": "wvpy.util", "qualname": "eval_fn_per_row", "type": "function", "doc": "<p>evaluate f(row-as-map, x2) for rows in df</p>\n\n<p>:param f:\n:param x2:\n:param df:\n:return:</p>\n", "parameters": ["f", "x2", "df"], "funcdef": "def"}, {"fullname": "wvpy.util.perm_score_vars", "modulename": "wvpy.util", "qualname": "perm_score_vars", "type": "function", "doc": "<p>evaluate model~istrue on d permuting each of the modelvars and return variable importances</p>\n\n<p>:param d:\n:param istrue:\n:param model:\n:param modelvars:\n:param k:\n:return:</p>\n", "parameters": ["d", "istrue", "model", "modelvars", "k"], "funcdef": "def"}, {"fullname": "wvpy.util.threshold_statistics", "modulename": "wvpy.util", "qualname": "threshold_statistics", "type": "function", "doc": "<p>Compute a number of threshold statistics of how well model predictions match a truth target.</p>\n\n<p>:param d: pandas.DataFrame to take values from\n:param model_predictions: name of predictions column\n:param yvalues: truth values\n:param y_target: value considered to be true\n:return: summary statistic frame, include before and after pseudo-observations</p>\n\n<p>Example:</p>\n\n<p>import pandas\nimport wvpy.util</p>\n\n<p>d = pandas.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [False, False, True, True, False]\n})</p>\n\n<p>wvpy.util.threshold_statistics(\n    d,\n    model_predictions='x',\n    yvalues='y',\n)</p>\n", "parameters": ["d", "model_predictions", "yvalues", "y_target"], "funcdef": "def"}, {"fullname": "wvpy.util.threshold_plot", "modulename": "wvpy.util", "qualname": "threshold_plot", "type": "function", "doc": "<p>Produce multiple facet plot relating the performance of using a threshold greater than or equal to\ndifferent values at predicting a truth target.</p>\n\n<p>:param d: pandas.DataFrame to plot\n:param pred_var: name of column of numeric predictions\n:param truth_var: name of column with reference truth\n:param truth_target: value considered true\n:param threshold_range: x-axis range to plot\n:param plotvars: list of metrics to plot, must come from ['threshold', 'count', 'fraction', 'precision',\n    'true_positive_rate', 'false_positive_rate', 'true_negative_rate', 'false_negative_rate',\n    'recall', 'sensitivity', 'specificity']\n:param title: title for plot\n:param show: logical, if True call matplotlib.pyplot.show()\n:return: None, plot produced as a side effect</p>\n\n<p>Example:</p>\n\n<p>import pandas\nimport wvpy.util</p>\n\n<p>d = pandas.DataFrame({\n    'x': [1, 2, 3, 4, 5],\n    'y': [False, False, True, True, False]\n})</p>\n\n<p>wvpy.util.threshold_plot(\n    d,\n    pred_var='x',\n    truth_var='y',\n    plotvars=(\"sensitivity\", \"specificity\"),\n)</p>\n", "parameters": ["d", "pred_var", "truth_var", "truth_target", "threshold_range", "plotvars", "title", "show"], "funcdef": "def"}]