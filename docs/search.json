[{"fullname": "vtreat", "modulename": "vtreat", "qualname": "", "type": "module", "doc": "<p>This<a href=\"https://github.com/WinVector/pyvtreat\">https://github.com/WinVector/pyvtreat</a> is the Python version of the vtreat data preparation system\n(also available as an R package<a href=\"http://winvector.github.io/vtreat/\">http://winvector.github.io/vtreat/</a>.</p>\n\n<p>vtreat is a DataFrame processor/conditioner that prepares\nreal-world data for supervised machine learning or predictive modeling\nin a statistically sound manner.</p>\n\n<p>vtreat takes an input DataFrame\nthat has a specified column called \"the outcome variable\" (or \"y\")\nthat is the quantity to be predicted (and must not have missing\nvalues).  Other input columns are possible explanatory variables\n(typically numeric or categorical/string-valued, these columns may\nhave missing values) that the user later wants to use to predict \"y\".\nIn practice such an input DataFrame may not be immediately suitable\nfor machine learning procedures that often expect only numeric\nexplanatory variables, and may not tolerate missing values.</p>\n\n<p>To solve this, vtreat builds a transformed DataFrame where all\nexplanatory variable columns have been transformed into a number of\nnumeric explanatory variable columns, without missing values.  The\nvtreat implementation produces derived numeric columns that capture\nmost of the information relating the explanatory columns to the\nspecified \"y\" or dependent/outcome column through a number of numeric\ntransforms (indicator variables, impact codes, prevalence codes, and\nmore).  This transformed DataFrame is suitable for a wide range of\nsupervised learning methods from linear regression, through gradient\nboosted machines.</p>\n\n<p>The idea is: you can take a DataFrame of messy real world data and\neasily, faithfully, reliably, and repeatably prepare it for machine\nlearning using documented methods using vtreat.  Incorporating\nvtreat into your machine learning workflow lets you quickly work\nwith very diverse structured data.</p>\n\n<p>Worked examples can be found <code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples\">https://github.com/WinVector/pyvtreat/tree/master/Examples</a>.</p>\n\n<p>For more detail please see here: <code>arXiv:1611.09477\nstat.AP</code><a href=\"https://arxiv.org/abs/1611.09477\">https://arxiv.org/abs/1611.09477</a> (the documentation describes the R version,\nhowever all of the examples can be found worked in Python \n<code>here</code><a href=\"https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1\">https://github.com/WinVector/pyvtreat/tree/master/Examples/vtreat_paper1</a>).</p>\n\n<p>vtreat is available\nas a <code>Python/Pandas package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>,\nand also as an <code>R package</code><a href=\"https://github.com/WinVector/vtreat\">https://github.com/WinVector/vtreat</a>.</p>\n"}, {"fullname": "vtreat.cross_plan", "modulename": "vtreat.cross_plan", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan", "type": "class", "doc": "<p>Data splitting plan</p>\n"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan.__init__", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.CrossValidationPlan.split_plan", "modulename": "vtreat.cross_plan", "qualname": "CrossValidationPlan.split_plan", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n_rows", "k_folds", "data", "y"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified", "type": "class", "doc": "<p>K-way cross validation plan, attempting an even y-distribution</p>\n"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified.__init__", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.cross_plan.KWayCrossPlanYStratified.split_plan", "modulename": "vtreat.cross_plan", "qualname": "KWayCrossPlanYStratified.split_plan", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "n_rows", "k_folds", "data", "y"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils", "modulename": "vtreat.stats_utils", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.stats_utils.our_corr_score", "modulename": "vtreat.stats_utils", "qualname": "our_corr_score", "type": "function", "doc": "<p></p>\n", "parameters": ["y_true", "y_pred"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.est_deviance", "modulename": "vtreat.stats_utils", "qualname": "est_deviance", "type": "function", "doc": "<p></p>\n", "parameters": ["y", "est", "epsilon"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.sklearn_solve_logistic", "modulename": "vtreat.stats_utils", "qualname": "sklearn_solve_logistic", "type": "function", "doc": "<p></p>\n", "parameters": ["y", "x", "regularization"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.solve_logistic_regression", "modulename": "vtreat.stats_utils", "qualname": "solve_logistic_regression", "type": "function", "doc": "<p></p>\n", "parameters": ["y", "x"], "funcdef": "def"}, {"fullname": "vtreat.stats_utils.our_pseudo_R2", "modulename": "vtreat.stats_utils", "qualname": "our_pseudo_R2", "type": "function", "doc": "<p></p>\n", "parameters": ["y_true", "y_pred"], "funcdef": "def"}, {"fullname": "vtreat.transform", "modulename": "vtreat.transform", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.transform.UserTransform", "modulename": "vtreat.transform", "qualname": "UserTransform", "type": "class", "doc": "<p>base class for user transforms, should express taking a set of k inputs to k outputs independently</p>\n"}, {"fullname": "vtreat.transform.UserTransform.__init__", "modulename": "vtreat.transform", "qualname": "UserTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "treatment"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.fit", "modulename": "vtreat.transform", "qualname": "UserTransform.fit", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X", "y"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.transform", "modulename": "vtreat.transform", "qualname": "UserTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.transform.UserTransform.fit_transform", "modulename": "vtreat.transform", "qualname": "UserTransform.fit_transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X", "y"], "funcdef": "def"}, {"fullname": "vtreat.util", "modulename": "vtreat.util", "qualname": "", "type": "module", "doc": "<p>Created on Sat Jul 20 11:40:41 2019</p>\n\n<p>@author: johnmount</p>\n"}, {"fullname": "vtreat.util.safe_to_numeric_array", "modulename": "vtreat.util", "qualname": "safe_to_numeric_array", "type": "function", "doc": "<p></p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.can_convert_v_to_numeric", "modulename": "vtreat.util", "qualname": "can_convert_v_to_numeric", "type": "function", "doc": "<p>check if non-empty vector can convert to numeric</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.is_bad", "modulename": "vtreat.util", "qualname": "is_bad", "type": "function", "doc": "<p>for numeric vector x, return logical vector of positions that are null, NaN, infinite</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.numeric_has_range", "modulename": "vtreat.util", "qualname": "numeric_has_range", "type": "function", "doc": "<p></p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.summarize_column", "modulename": "vtreat.util", "qualname": "summarize_column", "type": "function", "doc": "<p>Summarize column to a non-missing scalar.</p>\n\n<p>:param x: a vector/Series or column of numbers\n:param fn: summarize function (such as numpy.mean), only passed non-bad positions\n:return: scalar float summary of the non-None positions of x (otherwise 0)</p>\n", "parameters": ["x", "fn"], "funcdef": "def"}, {"fullname": "vtreat.util.characterize_numeric", "modulename": "vtreat.util", "qualname": "characterize_numeric", "type": "function", "doc": "<p>compute na count, min,max,mean of a numeric vector</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.get_unique_value_count", "modulename": "vtreat.util", "qualname": "get_unique_value_count", "type": "function", "doc": "<p>compute how many unique values in list-x</p>\n", "parameters": ["x"], "funcdef": "def"}, {"fullname": "vtreat.util.grouped_by_x_statistics", "modulename": "vtreat.util", "qualname": "grouped_by_x_statistics", "type": "function", "doc": "<p>compute some grouped by x vector summaries of numeric y vector (no missing values in y)</p>\n", "parameters": ["x", "y"], "funcdef": "def"}, {"fullname": "vtreat.util.score_variables", "modulename": "vtreat.util", "qualname": "score_variables", "type": "function", "doc": "<p>score the linear relation of variables to outcome</p>\n", "parameters": ["cross_frame", "variables", "outcome", "is_classification"], "funcdef": "def"}, {"fullname": "vtreat.util.check_matching_numeric_frames", "modulename": "vtreat.util", "qualname": "check_matching_numeric_frames", "type": "function", "doc": "<p>Check if two numeric pandas.DataFrame s are identical.  assert if not\n:param res:\n:param expect:\n:param tol: numeric tolerance.\n:return: None</p>\n", "parameters": ["res", "expect", "tol"], "funcdef": "def"}, {"fullname": "vtreat.util.unique_itmes_in_order", "modulename": "vtreat.util", "qualname": "unique_itmes_in_order", "type": "function", "doc": "<p></p>\n", "parameters": ["lst"], "funcdef": "def"}, {"fullname": "vtreat.util.clean_string", "modulename": "vtreat.util", "qualname": "clean_string", "type": "function", "doc": "<p></p>\n", "parameters": ["strng"], "funcdef": "def"}, {"fullname": "vtreat.util.build_level_codes", "modulename": "vtreat.util", "qualname": "build_level_codes", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "levels"], "funcdef": "def"}, {"fullname": "vtreat.util.hash_data_frame", "modulename": "vtreat.util", "qualname": "hash_data_frame", "type": "function", "doc": "<p></p>\n", "parameters": ["d"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api", "modulename": "vtreat.vtreat_api", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_api.vtreat_parameters", "modulename": "vtreat.vtreat_api", "qualname": "vtreat_parameters", "type": "function", "doc": "<p>build a vtreat parameters dictionary, adding in user choices</p>\n", "parameters": ["user_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.unsupervised_parameters", "modulename": "vtreat.vtreat_api", "qualname": "unsupervised_parameters", "type": "function", "doc": "<p>build a vtreat parameters dictionary for unsupervised tasks, adding in user choices</p>\n", "parameters": ["user_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a numeric outcome (regression)</p>\n"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or touple of column names\n:param outcome_name: name of column containing dependent variable\n:param cols_to_copy: list or touple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.merge_params", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.NumericOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "NumericOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>Fit to data, then transform it.</p>\n\n<p>Fits transformer to <code>X</code> and <code>y</code> with optional parameters <code>fit_params</code>\nand returns a transformed version of <code>X</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like of shape (n_samples, n_features)\n    Input samples.</p>\n\n<p>y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n    Target values (None for unsupervised transformations).</p>\n\n<p>**fit_params : dict\n    Additional fit parameters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a target outcome (binomial classification)</p>\n"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or touple of column names\n:param outcome_name: name of column containing dependent variable\n:param outcome_target: value of outcome to consider \"positive\"\n:param cols_to_copy: list or touple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "outcome_target", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.merge_params", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.BinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "BinomialOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>Fit to data, then transform it.</p>\n\n<p>Fits transformer to <code>X</code> and <code>y</code> with optional parameters <code>fit_params</code>\nand returns a transformed version of <code>X</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like of shape (n_samples, n_features)\n    Input samples.</p>\n\n<p>y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n    Target values (None for unsupervised transformations).</p>\n\n<p>**fit_params : dict\n    Additional fit parameters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment", "type": "class", "doc": "<p>manage a treatment plan for a set of outcomes (multinomial classification)</p>\n"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or touple of column names\n:param outcome_name: name of column containing dependent variable\n:param cols_to_copy: list or touple of column names\n:param params: vtreat.vtreat_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.merge_params", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.MultinomialOutcomeTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "MultinomialOutcomeTreatment.fit_transform", "type": "function", "doc": "<p>Fit to data, then transform it.</p>\n\n<p>Fits transformer to <code>X</code> and <code>y</code> with optional parameters <code>fit_params</code>\nand returns a transformed version of <code>X</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like of shape (n_samples, n_features)\n    Input samples.</p>\n\n<p>y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n    Target values (None for unsupervised transformations).</p>\n\n<p>**fit_params : dict\n    Additional fit parameters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment", "type": "class", "doc": "<p>manage an unsupervised treatment plan</p>\n"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.__init__", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.__init__", "type": "function", "doc": "<p>:param var_list: list or touple of column names\n:param cols_to_copy: list or touple of column names\n:param params: vtreat.unsupervised_parameters()\n:param imputation_map: map of column names to custom missing imputation values or functions</p>\n", "parameters": ["self", "var_list", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.merge_params", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.merge_params", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_api.UnsupervisedTreatment.fit_transform", "modulename": "vtreat.vtreat_api", "qualname": "UnsupervisedTreatment.fit_transform", "type": "function", "doc": "<p>Fit to data, then transform it.</p>\n\n<p>Fits transformer to <code>X</code> and <code>y</code> with optional parameters <code>fit_params</code>\nand returns a transformed version of <code>X</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like of shape (n_samples, n_features)\n    Input samples.</p>\n\n<p>y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n    Target values (None for unsupervised transformations).</p>\n\n<p>**fit_params : dict\n    Additional fit parameters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl", "modulename": "vtreat.vtreat_impl", "qualname": "", "type": "module", "doc": "<p>Created on Sat Jul 20 12:07:57 2019</p>\n\n<p>@author: johnmount</p>\n"}, {"fullname": "vtreat.vtreat_impl.ready_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "ready_data_frame", "type": "function", "doc": "<p></p>\n", "parameters": ["d"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.back_to_orig_type_data_frame", "modulename": "vtreat.vtreat_impl", "qualname": "back_to_orig_type_data_frame", "type": "function", "doc": "<p></p>\n", "parameters": ["d", "orig_type"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.VarTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "derived_column_names", "treatment"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VarTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VarTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name", "treatment", "code_book"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.MappedCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "MappedCodeTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.YAwareMappedCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "YAwareMappedCodeTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name", "treatment", "code_book", "refitter", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "replacement_value"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.CleanNumericTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "CleanNumericTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "derived_column_name"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicateMissingTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicateMissingTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_clean_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_clean_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_impact_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_regression_deviation_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_regression_deviation_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_impact_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_impact_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x", "y", "extra_args", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform", "type": "class", "doc": "<p></p>\n"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "incoming_column_name", "derived_column_names", "levels", "sparse_indicators"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.IndicatorCodeTransform.transform", "modulename": "vtreat.vtreat_impl", "qualname": "IndicatorCodeTransform.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "data_frame"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_indicator_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_indicator_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x", "min_fraction", "sparse_indicators"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_prevalence_code", "modulename": "vtreat.vtreat_impl", "qualname": "fit_prevalence_code", "type": "function", "doc": "<p></p>\n", "parameters": ["incoming_column_name", "x"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_numeric_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_numeric_outcome_treatment", "type": "function", "doc": "<p></p>\n", "parameters": ["X", "y", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_binomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_binomial_outcome_treatment", "type": "function", "doc": "<p></p>\n", "parameters": ["X", "y", "outcome_target", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_multinomial_outcome_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_multinomial_outcome_treatment", "type": "function", "doc": "<p></p>\n", "parameters": ["X", "y", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.fit_unsupervised_treatment", "modulename": "vtreat.vtreat_impl", "qualname": "fit_unsupervised_treatment", "type": "function", "doc": "<p></p>\n", "parameters": ["X", "var_list", "outcome_name", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pre_prep_frame", "modulename": "vtreat.vtreat_impl", "qualname": "pre_prep_frame", "type": "function", "doc": "<p>Create a copy of pandas.DataFrame x restricted to col_list union cols_to_copy with col_list - cols_to_copy\nconverted to only string and numeric types.  New pandas.DataFrame has trivial indexing.  If col_list\nis empty it is interpreted as all columns.</p>\n", "parameters": ["x", "col_list", "cols_to_copy", "cat_cols"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.perform_transform", "modulename": "vtreat.vtreat_impl", "qualname": "perform_transform", "type": "function", "doc": "<p></p>\n", "parameters": ["x", "transform", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.limit_to_appropriate_columns", "modulename": "vtreat.vtreat_impl", "qualname": "limit_to_appropriate_columns", "type": "function", "doc": "<p></p>\n", "parameters": ["res", "transform"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.mean_of_single_column_pandas_list", "modulename": "vtreat.vtreat_impl", "qualname": "mean_of_single_column_pandas_list", "type": "function", "doc": "<p></p>\n", "parameters": ["val_list"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_refit_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_refit_y_aware_cols", "type": "function", "doc": "<p></p>\n", "parameters": ["x", "y", "res", "plan", "cross_plan"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.cross_patch_user_y_aware_cols", "modulename": "vtreat.vtreat_impl", "qualname": "cross_patch_user_y_aware_cols", "type": "function", "doc": "<p></p>\n", "parameters": ["x", "y", "res", "params", "cross_plan"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "score_plan_variables", "type": "function", "doc": "<p></p>\n", "parameters": ["cross_frame", "outcome", "plan", "params", "is_classification"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.pseudo_score_plan_variables", "modulename": "vtreat.vtreat_impl", "qualname": "pseudo_score_plan_variables", "type": "function", "doc": "<p></p>\n", "parameters": ["cross_frame", "plan", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment", "type": "class", "doc": "<p>Helper class that provides a standard way to create an ABC using\ninheritance.</p>\n"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.__init__", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.__init__", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "var_list", "outcome_name", "outcome_target", "cols_to_copy", "params", "imputation_map"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.check_column_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.check_column_names", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "col_names"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.clear", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.clear", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_result_restriction", "type": "function", "doc": "<p></p>\n", "parameters": ["self"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_result_restriction", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_result_restriction", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "new_vars"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.merge_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.merge_params", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "p"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_transform", "type": "function", "doc": "<p>Fit to data, then transform it.</p>\n\n<p>Fits transformer to <code>X</code> and <code>y</code> with optional parameters <code>fit_params</code>\nand returns a transformed version of <code>X</code>.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like of shape (n_samples, n_features)\n    Input samples.</p>\n\n<p>y :  array-like of shape (n_samples,) or (n_samples, n_outputs),                 default=None\n    Target values (None for unsupervised transformations).</p>\n\n<p>**fit_params : dict\n    Additional fit parameters.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_new : ndarray array of shape (n_samples, n_features_new)\n    Transformed array.</p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.transform", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.transform", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_params", "type": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n", "parameters": ["self", "deep"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.set_params", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.set_params", "type": "function", "doc": "<p>vtreat exposes a subset of controls as tunable parameters, users can choose this set\nby specifying the tunable_params list in object construction parameters</p>\n", "parameters": ["self", "params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.fit_predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.fit_predict", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X", "y", "fit_params"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.predict_proba", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.predict_proba", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "X"], "funcdef": "def"}, {"fullname": "vtreat.vtreat_impl.VariableTreatment.get_feature_names", "modulename": "vtreat.vtreat_impl", "qualname": "VariableTreatment.get_feature_names", "type": "function", "doc": "<p></p>\n", "parameters": ["self", "input_features"], "funcdef": "def"}]